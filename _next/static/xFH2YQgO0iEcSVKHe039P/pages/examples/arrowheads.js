(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{SQNZ:function(e,t,r){"use strict";r.d(t,"b",function(){return n});var n=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(function(e){return"none"!==e}(e)?t:0)+.5};t.a=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none",i=arguments.length>3?arguments[3]:void 0,a=n(r,i);return[e-a,t-a]}},hsuq:function(e,t,r){"use strict";var n=r("z3IF"),i=r("hDBU"),a=r("2Fjn"),o=r("mXGw"),c=r.n(o),d=r("PDtE"),s=r("SQNZ"),h=r("/F3D"),l=c.a.createElement,u=6,p=6,m=function(e){var t=e.id,r=e.width,c=void 0===r?u:r,m=e.height,x=void 0===m?p:m,g=e.stroke,y=void 0===g?"none":g,b=e.strokeWidth,v=e.rtl,w=e.className,f=Object(a.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),k=Object(o.useMemo)(function(){var e=Object(s.a)(c,x,y,b),t=Object(i.a)(e,2);return function(e,t,r){var n=t/2;return[{x:0,y:-n},{x:r?-e:e,y:0},{x:0,y:n}]}(t[0],t[1],v).map(h.a)},[x,v,y,b,c]);return l("polygon",Object(n.a)({id:t,points:k,className:Object(d.a)("regraph-arrowhead","regraph-arrowhead-triangle",w),stroke:y},f))};m.getMarkerProps=function(e){var t=e.width,r=void 0===t?u:t,n=e.height,i=void 0===n?p:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r}},t.a=m},rxwB:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/examples/arrowheads",function(){return r("s9B1")}])},s9B1:function(e,t,r){"use strict";r.r(t);var n=r("z3IF"),i=r("2Fjn"),a=r("mXGw"),o=r.n(a),c=r("SAVP"),d=r("qImK"),s=r("H3Hr"),h=r("8foj"),l=r("PDtE"),u=o.a.createElement,p=Math.ceil,m=6,x=6,g=function(e){var t=e.id,r=e.width,o=void 0===r?m:r,c=e.height,d=void 0===c?x:c,s=e.rtl,h=e.className,g=Object(i.a)(e,["id","width","height","rtl","className"]),y=Object(a.useMemo)(function(){return function(e,t,r){var n=r?e:-e,i=p(t/2);return{x1:n,y1:-i,x2:n,y2:i}}(o,d,s)},[d,o,s]);return u("line",Object(n.a)({id:t},y,{className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-perp",h),strokeWidth:1,fill:"none"},g))};g.getMarkerProps=function(e){var t=e.width,r=void 0===t?m:t,n=e.height,i=void 0===n?x:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:0}};var y=g,b=r("hsuq"),v=o.a.createElement,w=Object(s.a)({normalizeConnections:!0,autoConnectionId:!0,extractBoxesFromNodes:!0,layout:!0,autoViewportSize:!0,connection:{type:h.a,strokeWidth:2,src:{marker:v(y,null)},dst:{marker:v(b.a,null)}}}),f=function(e){var t=e.box;return v("rect",t)},k=function(e,t){return{id:e,type:f,box:{x:50+100*t,y:40,width:20,height:20}}},j=r("Rbzu"),O=r("hDBU"),N=r("SQNZ"),E=r("/F3D"),B=o.a.createElement,T=6,W=6,M="inherent",P=function(e){var t=e.id,r=e.width,o=void 0===r?T:r,c=e.height,d=void 0===c?W:c,s=e.stroke,h=void 0===s?M:s,u=e.strokeWidth,p=e.rtl,m=e.className,x=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),g=Object(a.useMemo)(function(){var e=Object(N.a)(o,d,h,u),t=Object(O.a)(e,2);return function(e,t,r){var n=r?e:-e,i=t/2;return[{x:n,y:-i},{x:0,y:0},{x:n,y:i}]}(t[0],t[1],p).map(E.a)},[d,p,h,u,o]);return B("polyline",Object(n.a)({id:t,points:g,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-chevy",m),stroke:h,strokeLinejoin:"bevel",fill:"none"},x))};P.getMarkerProps=function(e){var t=e.width,r=void 0===t?T:t,n=e.height,i=void 0===n?W:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:0}};var C=P,D=o.a.createElement,F=6,z=12,L="inherent",S=function(e){var t=e.id,r=e.width,o=void 0===r?F:r,c=e.height,d=void 0===c?z:c,s=e.stroke,h=void 0===s?L:s,u=e.strokeWidth,p=e.rtl,m=e.className,x=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),g=Object(a.useMemo)(function(){var e=Object(N.a)(o,d,h,u),t=Object(O.a)(e,2);return function(e,t,r){var n=r?-1:1,i=t/2,a=e/2,o=n*e,c=o-n*a,d={x:o,y:-i},s={x:c,y:-i},h={x:c,y:-i+a},l={x:c,y:-a},u={x:c,y:0},p={x:c,y:a},m={x:c,y:i-a},x={x:c,y:i},g={x:o,y:i};return"\n    M ".concat(Object(E.a)(d),"\n    Q ").concat(Object(E.a)(s)," ").concat(Object(E.a)(h),"\n    L ").concat(Object(E.a)(l),"\n    Q ").concat(Object(E.a)(u)," ").concat(Object(E.a)({x:0,y:0}),"\n    Q ").concat(Object(E.a)(u)," ").concat(Object(E.a)(p),"\n    L ").concat(Object(E.a)(m),"\n    Q ").concat(Object(E.a)(x)," ").concat(Object(E.a)(g),"\n  ")}(t[0],t[1],p)},[d,p,h,u,o]);return D("path",Object(n.a)({id:t,d:g,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-curly",m),stroke:h,fill:"none"},x))};S.getMarkerProps=function(e){var t=e.width,r=void 0===t?F:t,n=e.height,i=void 0===n?z:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r}};var G=S,I=o.a.createElement,Q=6,R=6,X=.25,_=function(e){var t=e.id,r=e.width,o=void 0===r?Q:r,c=e.height,d=void 0===c?R:c,s=e.inset,h=void 0===s?X:s,u=e.stroke,p=e.strokeWidth,m=e.rtl,x=e.className,g=Object(i.a)(e,["id","width","height","inset","stroke","strokeWidth","rtl","className"]),y=Object(a.useMemo)(function(){var e=Object(N.a)(o,d,u,p),t=Object(O.a)(e,2);return function(e,t,r,n){var i=n?-1:1,a=t/2,o=-r*e;return[{x:0,y:0},{x:i*o,y:-a},{x:i*((1-r)*e),y:0},{x:i*o,y:a}]}(t[0],t[1],h,m).map(E.a)},[d,h,m,u,p,o]);return I("polygon",Object(n.a)({id:t,points:y,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-barbed",x),stroke:u},g))};_.getMarkerProps=function(e){var t=e.width,r=void 0===t?Q:t,n=e.height,i=void 0===n?R:n,a=e.inset,o=void 0===a?X:a;return{width:r,height:i,viewBox:{x:e.rtl?-(1-o)*r:-o*r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:(1-o)*r}};var A=_,V=o.a.createElement,q=10,Z=5,H=function(e){var t=e.id,r=e.width,o=void 0===r?q:r,c=e.height,d=void 0===c?Z:c,s=e.stroke,h=e.strokeWidth,u=e.rtl,p=e.className,m=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),x=Object(a.useMemo)(function(){var e=Object(N.a)(o,d,s,h),t=Object(O.a)(e,2);return function(e,t,r){var n=r?-1:1,i=t/2,a=e/2;return[{x:0,y:0},{x:n*a,y:-i},{x:n*e,y:0},{x:n*a,y:i}].map(function(e){return e.x-=n,e})}(t[0],t[1],u).map(E.a)},[d,u,s,h,o]);return V("polygon",Object(n.a)({id:t,points:x,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-diamond",p),stroke:s},m))};H.getMarkerProps=function(e){var t=e.width,r=void 0===t?q:t,n=e.height,i=void 0===n?Z:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r-1}};var J=H,U=o.a.createElement,K=6,Y=6,$=function(e){var t=e.id,r=e.width,o=void 0===r?K:r,c=e.height,d=void 0===c?Y:c,s=e.stroke,h=e.strokeWidth,u=e.rtl,p=e.className,m=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),x=Object(a.useMemo)(function(){return function(e,t,r,n){var i=n?-1:1;return{cx:e/2*i-i,cy:0,rx:(e-r)/2,ry:(t-r)/2}}(o,d,Object(N.b)(s,h),u)},[d,u,s,h,o]);return U("ellipse",Object(n.a)({id:t},x,{className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-ellipse",p),stroke:s},m))};$.getMarkerProps=function(e){var t=e.width,r=void 0===t?K:t,n=e.height,i=void 0===n?Y:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r-1}};var ee=$,te=r("1Ldg"),re=o.a.createElement,ne=function(e){var t=e.id,r=e.box,n=e.title,i=Object(te.a)(r),a=i.x,o=i.y;return re("g",{key:t},re("rect",r),re("text",{x:a,y:o,textAnchor:"middle",dominantBaseline:"central",fill:"#604A0E"},n))},ie=o.a.createElement,ae=Object(s.a)({autoConnectionId:!0,extractBoxesFromNodes:!0,layout:!0,autoViewportSize:!0}),oe={stroke:"none",fill:"inherent"},ce={stroke:"inherent",fill:"none"},de=[{src:{id:"Perp",marker:ie(y,null)},dst:{id:"Chevy",marker:ie(C,null)}},{src:{id:"Curly",marker:ie(G,{height:15})},dst:{id:"Barbed",marker:ie(A,oe)}},{src:{id:"Triangle (Full)",marker:ie(b.a,oe)},dst:{id:"Triangle (Empty)",marker:ie(b.a,ce)}},{src:{id:"Diamond (Full)",marker:ie(J,oe)},dst:{id:"Diamond (Empty)",marker:ie(J,ce)}},{src:{id:"Ellipse (Full)",marker:ie(ee,oe)},dst:{id:"Ellipse (Empty)",marker:ie(ee,ce)}}].map(function(e){return Object(j.a)({},e,{type:h.a,strokeWidth:2})}),se=function(e){return e.split(" ")[0]},he=ie(ae,{nodes:de.reduce(function(e,t,r){var n=t.src,i=t.dst,a={y:50*r+50,width:150,height:30};return e.push({id:n.id,type:ne,title:se(n.id),box:Object(j.a)({x:50},a)},{id:i.id,type:ne,title:se(i.id),box:Object(j.a)({x:300},a)}),e},[]),connections:de});r.d(t,"default",function(){return be});o.a.createElement;var le={},ue="wrapper",pe=Object(c.a)("h1",null,"Arrowheads"),me=Object(c.a)("p",null,"Basic example:"),xe=Object(c.a)(d.a,{code:"import React from 'react';\nimport { graph } from '@regraph/graph';\nimport { Line } from '@regraph/connections';\nimport { Triangle, Perp } from '@regraph/arrowheads';\n\nconst Graph = graph({\n  normalizeConnections: true,\n  autoConnectionId: true,\n  extractBoxesFromNodes: true,\n  layout: true,\n  autoViewportSize: true,\n  connection: {\n    type: Line,\n    strokeWidth: 2,\n    src: { marker: <Perp /> },\n    dst: { marker: <Triangle /> },\n  },\n});\n\nconst Rect = ({ box }) => <rect {...box} />;\n\nconst toNode = (id, index) => ({\n  id,\n  type: Rect,\n  box: { x: 50 + index * 100, y: 40, width: 20, height: 20 },\n});\n\nexport default () => (\n  <Graph\n    nodes={['left', 'centre', 'right'].map(toNode)}\n    connections={[\n      { src: 'centre', dst: 'left' },\n      { src: 'centre', dst: 'right' },\n    ]}\n  />\n);\n",output:Object(c.a)(function(){return v(w,{nodes:["left","centre","right"].map(k),connections:[{src:"centre",dst:"left"},{src:"centre",dst:"right"}]})},{mdxType:"Graph"}),path:"examples/arrowheads/index.jsx",mdxType:"Example"}),ge=Object(c.a)("p",null,"Some more arrowheads:"),ye=Object(c.a)(d.a,{code:"import React from 'react';\nimport { graph } from '@regraph/graph';\nimport { Line } from '@regraph/connections';\nimport {\n  Triangle,\n  Perp,\n  Chevy,\n  Ellipse,\n  Diamond,\n  Barbed,\n  Curly,\n} from '@regraph/arrowheads';\nimport TextBox from './TextBox';\n\nconst Graph = graph({\n  autoConnectionId: true,\n  extractBoxesFromNodes: true,\n  layout: true,\n  autoViewportSize: true,\n});\n\nconst full = { stroke: 'none', fill: 'inherent' };\nconst empty = { stroke: 'inherent', fill: 'none' };\n\nconst applyConnectionDefaults = connection => ({\n  ...connection,\n  type: Line,\n  strokeWidth: 2,\n});\nconst connections = [\n  {\n    src: { id: 'Perp', marker: <Perp /> },\n    dst: { id: 'Chevy', marker: <Chevy /> },\n  },\n  {\n    src: { id: 'Curly', marker: <Curly height={15} /> },\n    dst: { id: 'Barbed', marker: <Barbed {...full} /> },\n  },\n  {\n    src: { id: 'Triangle (Full)', marker: <Triangle {...full} /> },\n    dst: { id: 'Triangle (Empty)', marker: <Triangle {...empty} /> },\n  },\n  {\n    src: { id: 'Diamond (Full)', marker: <Diamond {...full} /> },\n    dst: { id: 'Diamond (Empty)', marker: <Diamond {...empty} /> },\n  },\n  {\n    src: { id: 'Ellipse (Full)', marker: <Ellipse {...full} /> },\n    dst: { id: 'Ellipse (Empty)', marker: <Ellipse {...empty} /> },\n  },\n].map(applyConnectionDefaults);\n\nconst firstWord = str => str.split(' ')[0];\n\nconst nodesReducer = (nodes, { src, dst }, index) => {\n  const box = { y: index * 50 + 50, width: 150, height: 30 };\n  nodes.push(\n    {\n      id: src.id,\n      type: TextBox,\n      title: firstWord(src.id),\n      box: { x: 50, ...box },\n    },\n    {\n      id: dst.id,\n      type: TextBox,\n      title: firstWord(dst.id),\n      box: { x: 300, ...box },\n    }\n  );\n  return nodes;\n};\n\nconst nodes = connections.reduce(nodesReducer, []);\n\nexport default () => <Graph nodes={nodes} connections={connections} />;\n",output:Object(c.a)(function(){return he},{mdxType:"GraphAll"}),path:"examples/arrowheads/all.jsx",mdxType:"Example"});function be(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(c.a)(ue,Object(n.a)({},le,r,{components:t,mdxType:"MDXLayout"}),pe,me,xe,ge,ye)}be.isMDXComponent=!0}},[["rxwB",1,0]]]);