(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{SQNZ:function(e,t,r){"use strict";r.d(t,"b",function(){return n});var n=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(function(e){return"none"!==e}(e)?t:0)+.5};t.a=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none",i=arguments.length>3?arguments[3]:void 0,a=n(r,i);return[e-a,t-a]}},hsuq:function(e,t,r){"use strict";var n=r("z3IF"),i=r("hDBU"),a=r("2Fjn"),o=r("mXGw"),c=r.n(o),d=r("PDtE"),s=r("SQNZ"),h=r("/F3D"),l=c.a.createElement,u=6,p=6,m=function(e){var t=e.id,r=e.width,c=void 0===r?u:r,m=e.height,x=void 0===m?p:m,g=e.stroke,y=void 0===g?"none":g,b=e.strokeWidth,v=e.rtl,w=e.className,f=Object(a.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),k=Object(o.useMemo)(function(){var e=Object(s.a)(c,x,y,b),t=Object(i.a)(e,2);return function(e,t,r){var n=t/2;return[{x:0,y:-n},{x:r?-e:e,y:0},{x:0,y:n}]}(t[0],t[1],v).map(h.a)},[x,v,y,b,c]);return l("polygon",Object(n.a)({id:t,points:k,className:Object(d.a)("regraph-arrowhead","regraph-arrowhead-triangle",w),stroke:y},f))};m.getMarkerProps=function(e){var t=e.width,r=void 0===t?u:t,n=e.height,i=void 0===n?p:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r}},t.a=m},rxwB:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/examples/arrowheads",function(){return r("s9B1")}])},s9B1:function(e,t,r){"use strict";r.r(t);var n=r("z3IF"),i=r("2Fjn"),a=r("mXGw"),o=r.n(a),c=r("SAVP"),d=r("qImK"),s=r("H3Hr"),h=r("8foj"),l=r("PDtE"),u=o.a.createElement,p=Math.ceil,m=6,x=6,g=function(e){var t=e.id,r=e.width,o=void 0===r?m:r,c=e.height,d=void 0===c?x:c,s=e.rtl,h=e.className,g=Object(i.a)(e,["id","width","height","rtl","className"]),y=Object(a.useMemo)(function(){return function(e,t,r){var n=r?e:-e,i=p(t/2);return{x1:n,y1:-i,x2:n,y2:i}}(o,d,s)},[d,o,s]);return u("line",Object(n.a)({id:t},y,{className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-perp",h),strokeWidth:1,fill:"none"},g))};g.getMarkerProps=function(e){var t=e.width,r=void 0===t?m:t,n=e.height,i=void 0===n?x:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:0}};var y=g,b=r("hsuq"),v=o.a.createElement,w=Object(s.a)({normalizeConnections:!0,autoConnectionId:!0,extractBoxesFromNodes:!0,layout:!0,autoViewportSize:!0}),f=function(e){var t=e.box;return v("rect",t)},k=function(e,t){return{id:e,type:f,box:{x:50+100*t,y:40,width:20,height:20}}},j=v(y,null),O=v(b.a,null),N=r("Rbzu"),E=r("hDBU"),B=r("SQNZ"),T=r("/F3D"),W=o.a.createElement,M=6,P=6,C="inherent",D=function(e){var t=e.id,r=e.width,o=void 0===r?M:r,c=e.height,d=void 0===c?P:c,s=e.stroke,h=void 0===s?C:s,u=e.strokeWidth,p=e.rtl,m=e.className,x=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),g=Object(a.useMemo)(function(){var e=Object(B.a)(o,d,h,u),t=Object(E.a)(e,2);return function(e,t,r){var n=r?e:-e,i=t/2;return[{x:n,y:-i},{x:0,y:0},{x:n,y:i}]}(t[0],t[1],p).map(T.a)},[d,p,h,u,o]);return W("polyline",Object(n.a)({id:t,points:g,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-chevy",m),stroke:h,strokeLinejoin:"bevel",fill:"none"},x))};D.getMarkerProps=function(e){var t=e.width,r=void 0===t?M:t,n=e.height,i=void 0===n?P:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:0}};var F=D,z=o.a.createElement,L=6,S=12,G="inherent",I=function(e){var t=e.id,r=e.width,o=void 0===r?L:r,c=e.height,d=void 0===c?S:c,s=e.stroke,h=void 0===s?G:s,u=e.strokeWidth,p=e.rtl,m=e.className,x=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),g=Object(a.useMemo)(function(){var e=Object(B.a)(o,d,h,u),t=Object(E.a)(e,2);return function(e,t,r){var n=r?-1:1,i=t/2,a=e/2,o=n*e,c=o-n*a,d={x:o,y:-i},s={x:c,y:-i},h={x:c,y:-i+a},l={x:c,y:-a},u={x:c,y:0},p={x:c,y:a},m={x:c,y:i-a},x={x:c,y:i},g={x:o,y:i};return"\n    M ".concat(Object(T.a)(d),"\n    Q ").concat(Object(T.a)(s)," ").concat(Object(T.a)(h),"\n    L ").concat(Object(T.a)(l),"\n    Q ").concat(Object(T.a)(u)," ").concat(Object(T.a)({x:0,y:0}),"\n    Q ").concat(Object(T.a)(u)," ").concat(Object(T.a)(p),"\n    L ").concat(Object(T.a)(m),"\n    Q ").concat(Object(T.a)(x)," ").concat(Object(T.a)(g),"\n  ")}(t[0],t[1],p)},[d,p,h,u,o]);return z("path",Object(n.a)({id:t,d:g,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-curly",m),stroke:h,fill:"none"},x))};I.getMarkerProps=function(e){var t=e.width,r=void 0===t?L:t,n=e.height,i=void 0===n?S:n;return{width:r,height:i,viewBox:{x:e.rtl?0:-r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r}};var Q=I,R=o.a.createElement,X=6,_=6,A=.25,V=function(e){var t=e.id,r=e.width,o=void 0===r?X:r,c=e.height,d=void 0===c?_:c,s=e.inset,h=void 0===s?A:s,u=e.stroke,p=e.strokeWidth,m=e.rtl,x=e.className,g=Object(i.a)(e,["id","width","height","inset","stroke","strokeWidth","rtl","className"]),y=Object(a.useMemo)(function(){var e=Object(B.a)(o,d,u,p),t=Object(E.a)(e,2);return function(e,t,r,n){var i=n?-1:1,a=t/2,o=-r*e;return[{x:0,y:0},{x:i*o,y:-a},{x:i*((1-r)*e),y:0},{x:i*o,y:a}]}(t[0],t[1],h,m).map(T.a)},[d,h,m,u,p,o]);return R("polygon",Object(n.a)({id:t,points:y,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-barbed",x),stroke:u},g))};V.getMarkerProps=function(e){var t=e.width,r=void 0===t?X:t,n=e.height,i=void 0===n?_:n,a=e.inset,o=void 0===a?A:a;return{width:r,height:i,viewBox:{x:e.rtl?-(1-o)*r:-o*r,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:(1-o)*r}};var q=V,Z=o.a.createElement,H=10,J=5,U=function(e){var t=e.id,r=e.width,o=void 0===r?H:r,c=e.height,d=void 0===c?J:c,s=e.stroke,h=e.strokeWidth,u=e.rtl,p=e.className,m=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),x=Object(a.useMemo)(function(){var e=Object(B.a)(o,d,s,h),t=Object(E.a)(e,2);return function(e,t,r){var n=r?-1:1,i=t/2,a=e/2;return[{x:0,y:0},{x:n*a,y:-i},{x:n*e,y:0},{x:n*a,y:i}].map(function(e){return e.x-=n,e})}(t[0],t[1],u).map(T.a)},[d,u,s,h,o]);return Z("polygon",Object(n.a)({id:t,points:x,className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-diamond",p),stroke:s},m))};U.getMarkerProps=function(e){var t=e.width,r=void 0===t?H:t,n=e.height,i=void 0===n?J:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r-1}};var K=U,Y=o.a.createElement,$=6,ee=6,te=function(e){var t=e.id,r=e.width,o=void 0===r?$:r,c=e.height,d=void 0===c?ee:c,s=e.stroke,h=e.strokeWidth,u=e.rtl,p=e.className,m=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),x=Object(a.useMemo)(function(){return function(e,t,r,n){var i=n?-1:1;return{cx:e/2*i-i,cy:0,rx:(e-r)/2,ry:(t-r)/2}}(o,d,Object(B.b)(s,h),u)},[d,u,s,h,o]);return Y("ellipse",Object(n.a)({id:t},x,{className:Object(l.a)("regraph-arrowhead","regraph-arrowhead-ellipse",p),stroke:s},m))};te.getMarkerProps=function(e){var t=e.width,r=void 0===t?$:t,n=e.height,i=void 0===n?ee:n;return{width:r,height:i,viewBox:{x:e.rtl?-r:0,y:-i/2,width:r,height:i},anchor:{x:0,y:0},trim:r-1}};var re=te,ne=r("1Ldg"),ie=o.a.createElement,ae=function(e){var t=e.id,r=e.box,n=e.title,i=Object(ne.a)(r),a=i.x,o=i.y;return ie("g",{key:t},ie("rect",r),ie("text",{x:a,y:o,textAnchor:"middle",dominantBaseline:"central",fill:"#604A0E"},n))},oe=o.a.createElement,ce=Object(s.a)({autoConnectionId:!0,extractBoxesFromNodes:!0,layout:!0,autoViewportSize:!0}),de={stroke:"none",fill:"inherent"},se={stroke:"inherent",fill:"none"},he=[{src:{id:"Perp",marker:oe(y,null)},dst:{id:"Chevy",marker:oe(F,null)}},{src:{id:"Curly",marker:oe(Q,{height:15})},dst:{id:"Barbed",marker:oe(q,de)}},{src:{id:"Triangle (Full)",marker:oe(b.a,de)},dst:{id:"Triangle (Empty)",marker:oe(b.a,se)}},{src:{id:"Diamond (Full)",marker:oe(K,de)},dst:{id:"Diamond (Empty)",marker:oe(K,se)}},{src:{id:"Ellipse (Full)",marker:oe(re,de)},dst:{id:"Ellipse (Empty)",marker:oe(re,se)}}].map(function(e){return Object(N.a)({},e,{type:h.a,strokeWidth:2})}),le=function(e){return e.split(" ")[0]},ue=oe(ce,{nodes:he.reduce(function(e,t,r){var n=t.src,i=t.dst,a={y:50*r+50,width:150,height:30};return e.push({id:n.id,type:ae,title:le(n.id),box:Object(N.a)({x:50},a)},{id:i.id,type:ae,title:le(i.id),box:Object(N.a)({x:300},a)}),e},[]),connections:he});r.d(t,"default",function(){return we});o.a.createElement;var pe={},me="wrapper",xe=Object(c.a)("h1",null,"Arrowheads"),ge=Object(c.a)("p",null,"Basic example:"),ye=Object(c.a)(d.a,{code:"import React from 'react';\nimport { graph } from '@regraph/graph';\nimport { Line } from '@regraph/connections';\nimport { Triangle, Perp } from '@regraph/arrowheads';\n\nconst Graph = graph({\n  normalizeConnections: true,\n  autoConnectionId: true,\n  extractBoxesFromNodes: true,\n  layout: true,\n  autoViewportSize: true,\n});\n\nconst Rect = ({ box }) => <rect {...box} />;\n\nconst toNode = (id, index) => ({\n  id,\n  type: Rect,\n  box: { x: 50 + index * 100, y: 40, width: 20, height: 20 },\n});\n\nexport default () => (\n  <Graph\n    nodes={['left', 'centre', 'right'].map(toNode)}\n    connections={[\n      { src: 'centre', dst: 'left' },\n      { src: 'centre', dst: 'right' },\n    ]}\n    connection={{\n      type: Line,\n      strokeWidth: 2,\n      src: { marker: <Perp /> },\n      dst: { marker: <Triangle /> },\n    }}\n  />\n);\n",output:Object(c.a)(function(){return v(w,{nodes:["left","centre","right"].map(k),connections:[{src:"centre",dst:"left"},{src:"centre",dst:"right"}],connection:{type:h.a,strokeWidth:2,src:{marker:j},dst:{marker:O}}})},{mdxType:"Graph"}),path:"examples/arrowheads/index.jsx",mdxType:"Example"}),be=Object(c.a)("p",null,"Some more arrowheads:"),ve=Object(c.a)(d.a,{code:"import React from 'react';\nimport { graph } from '@regraph/graph';\nimport { Line } from '@regraph/connections';\nimport {\n  Triangle,\n  Perp,\n  Chevy,\n  Ellipse,\n  Diamond,\n  Barbed,\n  Curly,\n} from '@regraph/arrowheads';\nimport TextBox from './TextBox';\n\nconst Graph = graph({\n  autoConnectionId: true,\n  extractBoxesFromNodes: true,\n  layout: true,\n  autoViewportSize: true,\n});\n\nconst full = { stroke: 'none', fill: 'inherent' };\nconst empty = { stroke: 'inherent', fill: 'none' };\n\nconst applyConnectionDefaults = connection => ({\n  ...connection,\n  type: Line,\n  strokeWidth: 2,\n});\nconst connections = [\n  {\n    src: { id: 'Perp', marker: <Perp /> },\n    dst: { id: 'Chevy', marker: <Chevy /> },\n  },\n  {\n    src: { id: 'Curly', marker: <Curly height={15} /> },\n    dst: { id: 'Barbed', marker: <Barbed {...full} /> },\n  },\n  {\n    src: { id: 'Triangle (Full)', marker: <Triangle {...full} /> },\n    dst: { id: 'Triangle (Empty)', marker: <Triangle {...empty} /> },\n  },\n  {\n    src: { id: 'Diamond (Full)', marker: <Diamond {...full} /> },\n    dst: { id: 'Diamond (Empty)', marker: <Diamond {...empty} /> },\n  },\n  {\n    src: { id: 'Ellipse (Full)', marker: <Ellipse {...full} /> },\n    dst: { id: 'Ellipse (Empty)', marker: <Ellipse {...empty} /> },\n  },\n].map(applyConnectionDefaults);\n\nconst firstWord = str => str.split(' ')[0];\n\nconst nodesReducer = (nodes, { src, dst }, index) => {\n  const box = { y: index * 50 + 50, width: 150, height: 30 };\n  nodes.push(\n    {\n      id: src.id,\n      type: TextBox,\n      title: firstWord(src.id),\n      box: { x: 50, ...box },\n    },\n    {\n      id: dst.id,\n      type: TextBox,\n      title: firstWord(dst.id),\n      box: { x: 300, ...box },\n    }\n  );\n  return nodes;\n};\n\nconst nodes = connections.reduce(nodesReducer, []);\n\nexport default () => <Graph nodes={nodes} connections={connections} />;\n",output:Object(c.a)(function(){return ue},{mdxType:"GraphAll"}),path:"examples/arrowheads/all.jsx",mdxType:"Example"});function we(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(c.a)(me,Object(n.a)({},pe,r,{components:t,mdxType:"MDXLayout"}),xe,ge,ye,be,ve)}we.isMDXComponent=!0}},[["rxwB",1,0]]]);