(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"2G0B":function(e,t,n){"use strict";var r=n("PYY6"),o=n("tnjc");t.a=function(e){return function(t){var n,i,a=t.getState,c=t.dispatch;return function(t){switch(t.type){case"mouseDown":var d=t.event.target;t.event.source=d;var p=e(d);i=p.move,Object(r.a)(i)&&(i=i()),i&&i.start&&Object(o.a)(i.start(t.event,a())).forEach(c),i&&(n=d);break;case"mouseMove":n&&i&&(t.event.source=n,c(i.drag(t.event)));break;case"mouseUp":n&&i&&i.end&&(t.event.source=n,Object(o.a)(i.end(t.event,a())).forEach(c)),n=null}}}}},"33tr":function(e,t,n){"use strict";t.a=function(e){return{cx:e.center.x,cy:e.center.y,rx:e.rx,ry:e.ry}}},SQNZ:function(e,t,n){"use strict";n.d(t,"b",(function(){return o}));var r=function(e){return"none"!==e},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(r(e)?t:0)+.5};t.a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none",r=arguments.length>3?arguments[3]:void 0,i=o(n,r);return[e-i,t-i]}},hsuq:function(e,t,n){"use strict";var r=n("z3IF"),o=n("hDBU"),i=n("2Fjn"),a=n("mXGw"),c=n.n(a),d=n("PDtE"),p=n("SQNZ"),s=n("/F3D"),h=c.a.createElement,u=6,g=6,l=function(e){var t=e.id,n=e.width,c=void 0===n?u:n,l=e.height,m=void 0===l?g:l,v=e.stroke,f=void 0===v?"none":v,b=e.strokeWidth,w=e.rtl,x=e.className,j=Object(i.a)(e,["id","width","height","stroke","strokeWidth","rtl","className"]),y=Object(a.useMemo)((function(){var e=Object(p.a)(c,m,f,b),t=Object(o.a)(e,2);return function(e,t,n){var r=t/2;return[{x:0,y:-r},{x:n?-e:e,y:0},{x:0,y:r}]}(t[0],t[1],w).map(s.a)}),[m,w,f,b,c]);return h("polygon",Object(r.a)({id:t,points:y,className:Object(d.a)("regraph-arrowhead","regraph-arrowhead-triangle",x),stroke:f},j))};l.getMarkerProps=function(e){var t=e.width,n=void 0===t?u:t,r=e.height,o=void 0===r?g:r;return{width:n,height:o,viewBox:{x:e.rtl?-n:0,y:-o/2,width:n,height:o},anchor:{x:0,y:0},trim:n}},t.a=l},k9wx:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/examples/editors/basic-drag-editor",function(){return n("qTDE")}])},qTDE:function(e,t,n){"use strict";n.r(t);var r=n("z3IF"),o=n("2Fjn"),i=n("mXGw"),a=n.n(i),c=n("/FXl"),d=n("qImK"),p=n("H3Hr"),s=n("PhSE"),h=n("7n+C"),u=n("2G0B"),g=n("8foj"),l=n("hsuq"),m=n("33tr"),v=n("RG6p"),f=n("OuZ7"),b={node:{move:{drag:function(e){return Object(f.f)({id:e.source.id,delta:e.delta})}}}},w=a.a.createElement,x=Object(p.a)({connector:Object(s.a)(),interactive:function(e){return{target:(t=e.target,{type:t.getAttribute("data-target"),id:t.id}),delta:e.getDelta&&e.getDelta()};var t},layout:!0,node:{type:function(e){var t=e.box,n=Object(o.a)(e,["box"]);return w("ellipse",Object(r.a)({},n,Object(m.a)(Object(v.a)(t))))},"data-target":"node"},connection:{type:g.a,strokeWidth:1,dst:{anchor:"chop-ellipse",marker:w(l.a,null)},src:{anchor:"chop-ellipse"}}}),j=Object(h.a)({tools:[u.a],getEditPolicies:function(e){return b[e.type]||{}},initialState:{nodes:[{id:"ping"},{id:"pong"}],boxes:{ping:{x:185,y:85,width:30,height:30},pong:{x:385,y:85,width:30,height:30}},connections:[{id:"ping->pong",src:{id:"ping"},dst:{id:"pong"}}]}}),y=w(j,null,w(x,{width:600,height:200}));n.d(t,"default",(function(){return T}));a.a.createElement;var O={},E="wrapper",k=Object(c.a)("h1",null,"Basic drag editor"),D=Object(c.a)("p",null,"You can drag the circles in this example:"),G=Object(c.a)(d.a,{code:"import React from 'react';\nimport { graph } from '@regraph/graph';\nimport { editor, connectGraph, moveTool } from '@regraph/editor';\nimport { Line } from '@regraph/connections';\nimport { Triangle } from '@regraph/arrowheads';\nimport { fromRect, toSvgProps } from '@regraph/geo/ellipse';\nimport getEditPolicies from './editPolicies';\n\nconst Circle = ({ box, ...props }) => (\n  <ellipse {...props} {...toSvgProps(fromRect(box))} />\n);\n\nconst getDomainTarget = element => ({\n  type: element.getAttribute('data-target'),\n  id: element.id,\n});\n\nconst eventMapper = event => ({\n  target: getDomainTarget(event.target),\n  delta: event.getDelta && event.getDelta(),\n});\n\nconst Graph = graph({\n  connector: connectGraph(),\n  interactive: eventMapper,\n  layout: true,\n  node: { type: Circle, 'data-target': 'node' },\n  connection: {\n    type: Line,\n    strokeWidth: 1,\n    dst: { anchor: 'chop-ellipse', marker: <Triangle /> },\n    src: { anchor: 'chop-ellipse' },\n  },\n});\n\nconst GraphEditor = editor({\n  tools: [moveTool],\n  getEditPolicies,\n  initialState: {\n    nodes: [{ id: 'ping' }, { id: 'pong' }],\n    boxes: {\n      ping: { x: 200 - 15, y: 100 - 15, width: 30, height: 30 },\n      pong: { x: 400 - 15, y: 100 - 15, width: 30, height: 30 },\n    },\n    connections: [\n      { id: 'ping->pong', src: { id: 'ping' }, dst: { id: 'pong' } },\n    ],\n  },\n});\n\nexport default () => (\n  <GraphEditor>\n    <Graph width={600} height={200} />\n  </GraphEditor>\n);\n",output:Object(c.a)((function(){return y}),{mdxType:"Graph"}),path:"examples/editor/basic-drag-editor/basic-drag-editor.jsx",sourceOpen:!0,mdxType:"Example"});function T(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.a)(E,Object(r.a)({},O,n,{components:t,mdxType:"MDXLayout"}),k,D,G)}T.isMDXComponent=!0}},[["k9wx",1,2,0,3,4,5,6]]]);